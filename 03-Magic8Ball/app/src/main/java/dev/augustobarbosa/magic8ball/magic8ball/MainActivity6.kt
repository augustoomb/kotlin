package dev.augustobarbosa.magic8ball.magic8ball

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Button
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import dev.augustobarbosa.magic8ball.magic8ball.ui.theme.Magic8BallTheme
import kotlin.random.Random
import kotlin.properties.ReadWriteProperty
import kotlin.reflect.KProperty


// USAR UM OBJETO SINGLETON
/*
Para comunicar claramente no c√≥digo que um objeto precisa apenas de uma inst√¢ncia, defina-o como um singleton. Um singleton √© uma classe que pode ter apenas uma inst√¢ncia. O Kotlin oferece uma estrutura especial, conhecida como objeto, que pode ser usada para criar uma classe singleton.
 A sintaxe de um objeto √© semelhante √† de uma classe. Basta usar a palavra-chave object, em vez da palavra-chave class
 Um objeto singleton n√£o pode ter um construtor, porque ele n√£o pode criar inst√¢ncias diretamente. Em vez disso, todas as propriedades s√£o definidas dentro das chaves e recebem um valor inicial.
 */

// ENUM
enum class Difficulty {
    EASY, MEDIUM, HARD
}

class Quiz {
    val question1 = Question<String>("Quoth the raven ___", "nevermore", Difficulty.MEDIUM)
    val question2 = Question<Boolean>("The sky is green. True or false", false, Difficulty.EASY)
    val question3 = Question<Int>("How many days are there between full moons?", 28, Difficulty.HARD)

    companion object StudentProgress {
        var total: Int = 10
        var answered: Int = 3
    }
}

// EXTENS√ÉO

// essa linha de c√≥digo cria uma forma mais limpa e organizada de acessar a informa√ß√£o de progresso do quiz, agindo como um atalho inteligente para a string de formata√ß√£o que voc√™ deseja.
val Quiz.StudentProgress.progressText: String // Kotlin: "Adicione uma nova propriedade, chamada progressText, ao objeto Quiz.StudentProgress."  SE CHAMA "EXTENS√ÉO"
    get() = "${answered} of ${total} answered"


fun Quiz.StudentProgress.printProgressBar() { // fun√ß√£o de extens√£o. extendendo StudentProgress
    repeat(Quiz.answered) { print("‚ñì") }
    repeat(Quiz.total - Quiz.answered) { print("‚ñí") }
    println()
    println(Quiz.progressText)
}

// GENERICS
data class Question<T>(
    val questionText: String,
    val answer: T,
    val difficulty: Difficulty
)

fun main() {
//    println(Quiz.progressText) // 3 of 10 answered.

    Quiz.printProgressBar()
}

/*
Em Kotlin, um companion object √© como uma √°rea de trabalho compartilhada para uma classe. Ele permite que voc√™ declare propriedades e fun√ß√µes que pertencem √† classe em si, em vez de a inst√¢ncias individuais (objetos) dessa classe. Pense nele como um lugar para armazenar coisas que s√£o as mesmas, n√£o importa quantos objetos da classe voc√™ crie.

A analogia do livro de receitas

Imagine que a classe Quiz √© uma receita de bolo üç∞. Voc√™ pode fazer v√°rios bolos (inst√¢ncias da classe), e cada bolo ter√° seus pr√≥prios ingredientes (as propriedades da inst√¢ncia, como question1, question2, etc.).

Agora, o companion object √© como uma anota√ß√£o na capa do seu livro de receitas que diz: "Este livro tem 10 receitas no total, e voc√™ j√° experimentou 3 delas". Essa informa√ß√£o (total e answered) √© relevante para o livro inteiro (a classe Quiz), e n√£o para um bolo espec√≠fico que voc√™ fez. Voc√™ n√£o precisa fazer um bolo para saber quantas receitas o livro cont√©m. √â uma informa√ß√£o que existe independentemente de voc√™ criar um objeto Quiz ou n√£o.

Por que usar um companion object?

    Acesso sem inst√¢ncias: Voc√™ pode acessar as propriedades e fun√ß√µes do companion object diretamente usando o nome da classe, como visto no seu exemplo: Quiz.answered. Isso √© √∫til para utilit√°rios, constantes ou estado compartilhado.

    Membros est√°ticos: Ele serve como o equivalente em Kotlin aos membros est√°ticos de outras linguagens, como Java. Eles s√£o carregados na mem√≥ria quando a classe √© carregada, e h√° apenas uma c√≥pia para todos os objetos da classe.

    Encapsulamento: Permite agrupar logicamente dados ou fun√ß√µes que est√£o intimamente ligados √† classe, mas que n√£o dependem do estado de uma inst√¢ncia, mantendo a coes√£o do c√≥digo.

No seu c√≥digo, StudentProgress √© o nome do seu companion object. Dentro dele, total e answered s√£o propriedades que acompanham o progresso geral do quiz, n√£o o progresso de um objeto Quiz espec√≠fico. Isso permite que voc√™ acesse e exiba esse progresso globalmente, de qualquer lugar no seu c√≥digo, sem a necessidade de criar uma nova inst√¢ncia de Quiz.
 */



/*
Quando voc√™ declara:
Kotlin

val Quiz.StudentProgress.progressText: String

Voc√™ est√° dizendo ao Kotlin: "Adicione uma nova propriedade, chamada progressText, ao objeto Quiz.StudentProgress."

O nome progressText foi "inventado" por quem escreveu o c√≥digo, mas a partir do momento que ele √© declarado como uma propriedade de extens√£o, o Kotlin o trata como se ele fosse um membro original daquele companion object. √â por isso que voc√™ pode acess√°-lo usando a nota√ß√£o de ponto (.), da mesma forma que acessa as propriedades total e answered.

Pense assim: a property de extens√£o √© uma forma de "adicionar" um nome e uma funcionalidade a uma classe (ou a um companion object), mesmo que voc√™ n√£o tenha acesso ao c√≥digo-fonte original dela. O Kotlin, ent√£o, cuida de fazer com que esse novo nome se comporte exatamente como uma propriedade comum.
 */












